"""Test the API with schemathesis."""
import datetime
import uuid

from email_validator import EmailNotValidError  # type: ignore
from email_validator import validate_email
from hypothesis import strategies as st
from schemathesis.loaders import from_asgi

from app.main import app
from app.persistors import BookRequestDict
from app.persistors import book_requests
from app.persistors import books

schema = from_asgi("/openapi.json", app)


def book_request_fixture():
    """Create some request to sample from."""
    for i in range(2):
        br: BookRequestDict = {
            "uid": uuid.uuid4(),
            "title": f"t{i}",
            "email": f"a{i}@example.test",
            "timestamp": datetime.datetime.now(),
        }
        book_requests[br["uid"]] = br
        yield br["uid"]


@schema.parametrize()
def test_api(case):
    """Check all endpoints to conform to the schema."""
    response = case.call_asgi()
    case.validate_response(response)


@schema.parametrize(endpoint="/request/", method="POST")
@schema.given(data=st.data())
def test_request_add_valid(data, case):
    """Always return a 201 response when the book is in db and a valid email."""
    case.body["email"] = data.draw(st.emails())
    case.body["title"] = data.draw(st.sampled_from(list(books.values())))
    response = case.call_asgi(app=app)
    try:
        validate_email(case.body["email"], check_deliverability=False)
        assert response.status_code == 201
    except EmailNotValidError:  # pragma: no cover
        # not all emails generated by hypothesis pass pydantic validation.
        assert response.status_code == 422


@schema.parametrize(endpoint="/request/", method="DELETE")
@schema.given(data=st.data())
def test_request_del_uuid(data, case):
    """Return a 404 when called with a uuid not in db."""
    case.path_parameters["item_id"] = data.draw(st.uuids())

    response = case.call_asgi(app=app)

    assert response.status_code == 404
    case.validate_response(response)


@schema.parametrize(endpoint="/request/", method="DELETE")
@schema.given(data=st.data())
def test_request_del_valid_uuid(data, case):
    """Return a 204 when called with a uuid in db."""
    case.path_parameters["item_id"] = data.draw(
        st.sampled_from(list(book_request_fixture())),
    )

    response = case.call_asgi(app=app)

    assert response.status_code == 204
    case.validate_response(response)


@schema.parametrize(endpoint="/request/", method="GET")
@schema.given(data=st.data())
def test_request_get_uuid(data, case):
    """Return a 404 when called with a uuid not in db."""
    if not case.path_parameters:
        return
    case.path_parameters["item_id"] = data.draw(st.uuids())

    response = case.call_asgi(app=app)

    assert response.status_code == 404
    case.validate_response(response)


@schema.parametrize(endpoint="/request/", method="GET")
@schema.given(data=st.data())
def test_request_get_valid_uuid(data, case):
    """Return a 200 when called with a uuid in db."""
    if not case.path_parameters:
        return
    case.path_parameters["item_id"] = data.draw(
        st.sampled_from(list(book_request_fixture())),
    )

    response = case.call_asgi(app=app)

    assert response.status_code == 200
    case.validate_response(response)
